{
  "language": "Solidity",
  "sources": {
    "contracts/MultiSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nimport \"./external/OwnedAbilityStorage.sol\";\r\nimport \"./Claimable.sol\";\r\nimport \"./libraries/SafeMath.sol\";\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ninterface ERC20Basic {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract MultiSender is OwnedAbilityStorage, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    event Multisended(uint256 total, address tokenAddress);\r\n    event ClaimedTokens(address token, address owner, uint256 balance);\r\n\r\n    modifier hasFee() {\r\n        if (currentFee(msg.sender) > 0) {\r\n            require(msg.value >= currentFee(msg.sender));\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Fallback: reverts if Ether is sent to this smart contract by mistake\r\n    fallback() external { \r\n        require(msg.data.length == 0);\r\n        revert();\r\n    }\r\n\r\n    function initialize(address _owner) public {\r\n        require(!initialized());\r\n        setOwner(_owner);\r\n        setArrayLimit(200);\r\n        setDiscountStep(0.00005 ether);\r\n        setFee(0.05 ether);\r\n        boolStorage[keccak256(abi.encode(\"rs_multisender_initialized\"))] = true;\r\n    }\r\n\r\n    function initialized() public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encode(\"rs_multisender_initialized\"))];\r\n    }\r\n \r\n    function txCount(address customer) public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encode(\"txCount\", customer))];\r\n    }\r\n\r\n    function arrayLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encode(\"arrayLimit\"))];\r\n    }\r\n\r\n    function setArrayLimit(uint256 _newLimit) public onlyOwner {\r\n        require(_newLimit != 0);\r\n        uintStorage[keccak256(abi.encode(\"arrayLimit\"))] = _newLimit;\r\n    }\r\n\r\n    function discountStep() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encode(\"discountStep\"))];\r\n    }\r\n\r\n    function setDiscountStep(uint256 _newStep) public onlyOwner {\r\n        require(_newStep != 0);\r\n        uintStorage[keccak256(abi.encode(\"discountStep\"))] = _newStep;\r\n    }\r\n\r\n    function fee() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encode(\"fee\"))];\r\n    }\r\n\r\n    function currentFee(address _customer) public view returns(uint256) {\r\n        if (fee() > discountRate(msg.sender)) {\r\n            return fee().sub(discountRate(_customer));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setFee(uint256 _newStep) public onlyOwner {\r\n        require(_newStep != 0);\r\n        uintStorage[keccak256(abi.encode(\"fee\"))] = _newStep;\r\n    }\r\n\r\n    function discountRate(address _customer) public view returns(uint256) {\r\n        uint256 count = txCount(_customer);\r\n        return count.mul(discountStep());\r\n    }\r\n\r\n    function multisendToken(address token, address payable[] calldata _contributors, uint256[] calldata _balances) public hasFee payable {\r\n        if (token == 0x000000000000000000000000000000000000bEEF){\r\n            multisendEther(_contributors, _balances);\r\n        } else {\r\n            uint256 total = 0;\r\n            require(_contributors.length <= arrayLimit());\r\n            ERC20 erc20token = ERC20(token);\r\n            uint8 i = 0;\r\n            for (i; i < _contributors.length; i++) {\r\n                erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n                total += _balances[i];\r\n            }\r\n            setTxCount(msg.sender, txCount(msg.sender).add(1));\r\n            emit Multisended(total, token);\r\n        }\r\n    }\r\n\r\n    function multisendEther(address payable[] calldata _contributors, uint256[] calldata _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 feeValue = currentFee(msg.sender);\r\n        require(total >= feeValue);\r\n        require(_contributors.length <= arrayLimit());\r\n        total = total.sub(feeValue);\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n        setTxCount(msg.sender, txCount(msg.sender).add(1));\r\n        emit Multisended(msg.value, 0x000000000000000000000000000000000000bEEF);\r\n    }\r\n\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == address(0x0)) {\r\n            // owner().transfer(this.balance);\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n        erc20token.transfer(owner(), balance);\r\n        emit ClaimedTokens(_token, owner(), balance);\r\n    }\r\n    \r\n    function setTxCount(address customer, uint256 _txCount) private {\r\n        uintStorage[keccak256(abi.encode(\"txCount\", customer))] = _txCount;\r\n    }\r\n\r\n}"
    },
    "contracts/external/OwnedAbilityStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nimport \"./ExternalStorage.sol\";\r\nimport \"./AbilityStorage.sol\";\r\nimport \"./AbilityOwnerStorage.sol\";\r\n\r\ncontract OwnedAbilityStorage is AbilityOwnerStorage, AbilityStorage, ExternalStorage {}"
    },
    "contracts/Claimable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./external/ExternalStorage.sol\";\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is ExternalStorage, Ownable {\r\n    function pendingOwner() public view returns (address) {\r\n        return addressStorage[keccak256(\"pendingOwner\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public override onlyOwner {\r\n        require(newOwner != address(0));\r\n        addressStorage[keccak256(\"pendingOwner\")] = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner(), pendingOwner());\r\n        addressStorage[keccak256(\"owner\")] = addressStorage[keccak256(\"pendingOwner\")];\r\n        addressStorage[keccak256(\"pendingOwner\")] = address(0);\r\n    }\r\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"
    },
    "contracts/external/ExternalStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title ExternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract ExternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n"
    },
    "contracts/external/AbilityStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title AbilityStorage\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\ncontract AbilityStorage {\r\n    // Version name of the current implementation\r\n    string internal _version;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n    * @dev Tells the version name of the current implementation\r\n    * @return string representing the name of the current version\r\n    */\r\n    function version() public view returns (string memory) {\r\n        return _version;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n}"
    },
    "contracts/external/AbilityOwnerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n * @title AbilityOwnerStorage\r\n * @dev This contract keeps track of the abilityOwner owner\r\n */\r\ncontract AbilityOwnerStorage {\r\n    // Owner of the contract\r\n    address private _abilityOwner;\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function abilityOwner() public view returns (address) {\r\n        return _abilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the owner\r\n    */\r\n    function setAbilityOwner(address newAbilityOwner) internal {\r\n        _abilityOwner = newAbilityOwner;\r\n    }\r\n\r\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\nimport \"./external/ExternalStorage.sol\";\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is ExternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view virtual returns (address) {\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}